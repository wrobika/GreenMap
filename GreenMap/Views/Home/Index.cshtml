@{
    ViewData["Title"] = "Home Page";
}

    <span id="status">&nbsp;0 selected features</span>
@{
    await Html.RenderPartialAsync("_NavigationBar");
    var epionierDbContext = new epionierContext();
    var zielenController = new GreenMap.Controllers.ZielenController(epionierDbContext);
    var cbdhController = new GreenMap.Controllers.CbdhObjController(epionierDbContext);
    var hydroController = new GreenMap.Controllers.HydroController(epionierDbContext);
    var dzielniceController = new GreenMap.Controllers.DzielniceController(epionierDbContext);
    var miastoController = new GreenMap.Controllers.GraniceMiastaController(epionierDbContext);
    var greenery = await zielenController.GetZielen();
    var objects = await cbdhController.GetCbdhObj();
    var hydro = await hydroController.GetHydro();
    var districts = await dzielniceController.GetDzielnice();
    var city = await miastoController.GetGraniceMiasta();
}

<script type="text/javascript">

    var container = document.getElementById('popup');
    var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');

    var overlay = new ol.Overlay({
        element: container,
        autoPan: true,
        autoPanAnimation: {
            duration: 250
        }
    });

    closer.onclick = function() {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
    };

    function colorWithAlpha(color, alpha) {
        const [r,g,b] = Array.from(ol.color.asArray(color));
        return ol.color.asString([r,g,b,alpha]);
    }

    proj4.defs('EPSG:2180', '+proj=tmerc + lat_0=0 + lon_0=19 + k=0.9993 + x_0=500000 + y_0=-5300000 + ellps=GRS80 + towgs84=0, 0, 0, 0, 0, 0, 0 + units=m + no_defs');
    ol.proj.proj4.register(proj4);
    var wktReader = new ol.format.WKT();

    function getLayerSource(objectsArray) {
        var featuresArray = [];
        for (var obj of objectsArray) {
            var feature = wktReader.readFeature(obj);
            feature.getGeometry().transform('EPSG:2180', 'EPSG:3857');
            featuresArray.push(feature);
        }
        return new ol.source.Vector({
            features: featuresArray
        });
    }

    var greeneryArray = @Html.Raw(Json.Serialize(greenery));
    var objectArray = @Html.Raw(Json.Serialize(objects));
    var hydroArray = @Html.Raw(Json.Serialize(hydro));
    var districtArray = @Html.Raw(Json.Serialize(districts));
    var cityArray = @Html.Raw(Json.Serialize(city));

    var greeneryLayer = new ol.layer.Vector({
        name: 'zieleń',
        source: getLayerSource(greeneryArray),
        style: new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: 'Green'
            }),
            fill: new ol.style.Fill({
                color: colorWithAlpha('LimeGreen', 0.7)
            })
        })
    });

    var objectCluster = new ol.source.Cluster({
        distance: 50,
        source: getLayerSource(objectArray)
    });

    var objectLayer = new ol.layer.Vector({
        name: 'obiekty',
        source: objectCluster,
        style: function (feature) {
            var size = feature.get('features').length;
            if (size === 1) {
                style = new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 10,
                        fill: new ol.style.Fill({
                            color: 'DarkBlue'
                        })
                    })
                })
            }
            else {
                style = new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 10,
                        fill: new ol.style.Fill({
                            color: 'DarkBlue'
                        })
                    }),
                    text: new ol.style.Text({
                        text: size.toString(),
                        fill: new ol.style.Fill({
                            color: 'White'
                        })
                    })
                });
            }
            return style;
        }
    });

    var hydroLayer = new ol.layer.Vector({
        name: 'cieki/zbiorniki',
        source: getLayerSource(hydroArray),
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'Aquamarine'
            })
        })
    }); 

    var districtLayer = new ol.layer.Vector({
        name: 'dzielnice',
        source: getLayerSource(districtArray),
        style: new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: 'Gold',
                width: 2
            }),
            fill: new ol.style.Fill({
                color: colorWithAlpha('Gold', 0.5)
            })
        })
    });

    var cityLayer = new ol.layer.Vector({
        name: 'miasto',
        source: getLayerSource(cityArray),
        style: new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: colorWithAlpha('OrangeRed',0.7),
                width: 2
            })
        })
    });

    var background = new ol.layer.Tile({
        name: 'mapa',
        source: new ol.source.OSM()
    });

    var wms = new ol.layer.Tile({
        name: 'wms',
        source: new ol.source.TileWMS({
            url: 'https://ahocevar.com/geoserver/wms',
            params: { 'LAYERS': 'topp:states', 'TILED': true },
        })
    });

    var map = new ol.Map({
        layers: [background, cityLayer, districtLayer, wms,
            greeneryLayer, hydroLayer, objectLayer],
        target: 'map',
        overlays: [overlay],
        view: new ol.View({
            center: ol.proj.fromLonLat([19.978618, 50.060601]),
            zoom: 12
        })
    });

    function changeVisibility() {
        var layer_name = this.value;
        var button = this;
        map.getLayers().forEach(function (layer) {
            if (layer.get('name') === layer_name) {
                var isVisible = layer.get('visible');
                layer.setVisible(!isVisible);
                if (isVisible) {
                    button.className = 'dropdown-item text-black bg-light';
                } else {
                    button.className = 'dropdown-item text-white bg-success';
                }
            }
        });
    }

    let buttons = document.querySelectorAll('.dropdown-item')
    buttons.forEach((btn) => {
        btn.addEventListener("click", changeVisibility);
    });

    var wktReader = new ol.format.WKT();
    var interaction = new ol.interaction.Select({
        condition: ol.events.condition.click,
        layers: [objectLayer]
        //condition: ol.events.condition.pointerMove,
    });
    map.addInteraction(interaction);
    interaction.on('select', function (e) {
        var selectFeatures = interaction.getFeatures().getArray();
        document.getElementById('status').innerHTML = '&nbsp;' +
            e.target.getFeatures().getLength() +
            ' selected features (last operation selected ' + e.selected.length +
            ' and deselected ' + e.deselected.length + ' features)';
        if (selectFeatures.length !== 0) {
                    var coordinate = selectFeatures[0].getGeometry().getCoordinates();
        var hdms = ol.coordinate.toStringHDMS(ol.proj.toLonLat(coordinate));
        content.innerHTML = '<p>You clicked here:</p><code>' + hdms +'</code>';
        overlay.setPosition(coordinate);
        } else {
            overlay.setPosition(undefined);
            closer.blur();
            return false;
        }

        $.ajax({
            contentType: "application/json; charset=utf-8",
            type: "POST",
            url: "/grid",
            data: wktReader.writeFeatures(selectFeatures, { dataProjection: 'EPSG:4326', featureProjection: 'EPSG:3857' }),
            success: function (data) {

            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.log('error while post');
            }
        });
    });

    map.on('singleclick', function(evt) {
        var coordinate = evt.coordinate;
        var hdms = ol.coordinate.toStringHDMS(ol.proj.toLonLat(coordinate));

        content.innerHTML = '<p>You clicked here:</p><code>' + hdms +
            '</code>';
        overlay.setPosition(coordinate);
    });
</script>