@{
    ViewData["Title"] = "Home Page";
    await Html.RenderPartialAsync("_NavigationBar");
    var epionierDbContext = new epionierContext();
    var zielenController = new GreenMap.Controllers.ZielenController(epionierDbContext);
    var cbdhController = new GreenMap.Controllers.CbdhObjController(epionierDbContext);
    var hydroController = new GreenMap.Controllers.HydroController(epionierDbContext);
    var dzielniceController = new GreenMap.Controllers.DzielniceController(epionierDbContext);
    var miastoController = new GreenMap.Controllers.GraniceMiastaController(epionierDbContext);
    var odwiertController = new GreenMap.Controllers.OdwiertController(epionierDbContext);
    var zwierciadloController = new GreenMap.Controllers.ZwierciadloGlController(epionierDbContext);
    var hydroizohipsyController = new GreenMap.Controllers.HydroizohipsyController(epionierDbContext);

    var greenery = await zielenController.GetZielen();
    var objects = await cbdhController.GetCbdhObj();
    var hydro = await hydroController.GetHydro();
    var districts = await dzielniceController.GetDzielnice();
    var city = await miastoController.GetGraniceMiasta();
    var hydroizohypse = await hydroizohipsyController.GetHydroizohipsy();
    var drilling = await odwiertController.GetOdwiert();
    var filter = await zwierciadloController.GetZwierciadloFiltracja();
    var layersProperties = LayersProperties.Layers;
}
<!---span id="status">&nbsp;0 selected features</span-->
<script src="~/lib/createLayers.js"></script>
<script src="~/lib/searchFunctions.js"></script>
<script type="text/javascript">

    var container = document.getElementById('popup');
    var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');

    var overlay = new ol.Overlay({
        element: container,
        autoPan: true,
        autoPanAnimation: {
            duration: 250
        }
    });

    closer.onclick = function() {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
    };

    var layerProperties = @Html.Raw(Json.Serialize(layersProperties));

    var layerObjects = {
        'city': @Html.Raw(Json.Serialize(city)),
        'district': @Html.Raw(Json.Serialize(districts)),
        'greenery': @Html.Raw(Json.Serialize(greenery)),
        'hydro': @Html.Raw(Json.Serialize(hydro)),
        'hydroizohypse': @Html.Raw(Json.Serialize(hydroizohypse)),
        'filter': @Html.Raw(Json.Serialize(filter)),
        'rbdh': @Html.Raw(Json.Serialize(objects)),
        'drilling': @Html.Raw(Json.Serialize(drilling)),
    };

    var background = new ol.layer.Tile({
        name: 'background',
        source: new ol.source.OSM()
    });

    var wms = new ol.layer.Tile({
        name: 'wms',
        source: new ol.source.TileWMS({
            url: 'https://ahocevar.com/geoserver/wms',
            params: { 'LAYERS': 'topp:states', 'TILED': true },
        })
    });

    var layers = [background];
    var layerNames = Object.keys(layerObjects);
    layerNames.map(name => layers.push(getLayer(name)));

    var map = new ol.Map({
        layers: layers,
        target: 'map',
        overlays: [overlay],
        view: new ol.View({
            center: ol.proj.fromLonLat([19.978618, 50.060601]),
            zoom: 12
        })
    });

    function setVisible(button, layerName) {
        var img = document.getElementById('eye_' + layerName);
        button.className = 'dropdown-item';
        opacity = layerName != "city" ? layerProperties[layerName].opacity : "0.7";
        button.style = 'background-color:' + layerProperties[layerName].color
            + ';opacity:' + opacity
            + ';color:' + layerProperties[layerName].text;
        img.src = '@Url.Content("~/css/eye.png")';
    }

    function setInvisible(button, layerName) {
        var img = document.getElementById('eye_' + layerName);
        button.className = 'dropdown-item text-black bg-light';
        button.style = 'color:black';
        img.src = '@Url.Content("~/css/eye_closed.png")';
    }

    function setVisibility(button, changeVisibility) {
        var layerName = button.value;
        map.getLayers().forEach(function (layer) {
            if (layer.get('name') === layerName) {
                var isVisible = layer.get('visible');
                if (changeVisibility) {
                    layer.setVisible(!isVisible);
                    isVisible = !isVisible;
                }
                if (isVisible)
                    setVisible(button, layerName);
                else
                    setInvisible(button, layerName);
            }
        });
    }

    let buttons = document.querySelectorAll('.dropdown-item')
    buttons.forEach((btn) => {
        setVisibility(btn, false);
        btn.addEventListener("click", function () {
            setVisibility(btn, true);
        });
    });
</script>
<script src="~/lib/mapInteraction.js"></script>